@page "/explore"
@using ECommerce.Client.Classes;
@using ECommerce.Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@layout SecondaryLayout
@inject ISnackbar Snackbar
@attribute [Authorize]



@if(_isloading)
{

    <MudOverlay Visible="true" Style="width:100%; height:100%;"  LightBackground="true" ZIndex="9999" AutoClose="true"></MudOverlay>
        <div class="container position-absolute top-50 bottom-50" style="left:25%;right:25%;">
            <ECommerce.Client.Components.MainLoader />
        </div>
}
else
{
    if(_products!.Count == 0)
    {
       <MudPaper Style="height:100vh; width:100%;" Outlined="true" Class="border-hidden pa-4" Elevation="0">
         <div class="row" style="width:100%;height:100vh;">
            <div class="col d-flex justify-content-center align-items-center flex-wrap gap-3">
                <MudText Align="Align.Center" Typo="Typo.caption"> No producs available atm</MudText>
            </div>
         </div>
       </MudPaper>
    }
}

<div class="container" hidden="@isSearchFieldHidden">
    <ECommerce.Client.Components.SearchBox  OnSearch="SearchProducts" Style="color:white; position:fixed; width:40%;bottom:14px;right:15px; padding:12px;z-index:99;border-radius:40px"></ECommerce.Client.Components.SearchBox>
</div>


@* Admin *@
<AuthorizeView Roles="True">
    <Authorized>
        <MudPaper Style="height:100vh; width:100%;" Outlined="true" Class="border-hidden pa-4 bg-light" Elevation="0">
         <div class="row" style="width:100%;height:100vh;">
            <div class="col d-flex justify-content-center align-items-center flex-wrap gap-3">     
                    @foreach (var product in _products!)
                    {
                          fileInput = $"fileInputId-{uniqueId}";
                          <ECommerce.Client.Components.EditableProductCard  FileInputIdentifier="@fileInput" Product="product" OnRemoveCard="() => RemoveProduct(product)" OnSave="() => UpdateProduct(product)"></ECommerce.Client.Components.EditableProductCard>
                          uniqueId = uniqueId + 1;
                    }
            </div>
          </div>
        </MudPaper>
    </Authorized>
</AuthorizeView>

@* User *@
<AuthorizeView Roles="False">
    <Authorized>
        <MudPaper Style="height:100vh; width:100%;" Outlined="true" Class="border-hidden pa-4" Elevation="0">
            <div class="row" style="width:100%;height:100vh;">
                <div class="col d-flex justify-content-center align-items-center flex-wrap gap-3">
                    @foreach (var product in _products!)
                    {
                        if(product.PiecesAvaliable != 0)
                        {
                          <ECommerce.Client.Components.ProductCard OnAddToCart="() => AddToCart(product)" Product="product"></ECommerce.Client.Components.ProductCard>
                        }
                    }
                </div>
            </div>
        </MudPaper>
    </Authorized>
</AuthorizeView>

@*View User*@
<AuthorizeView Roles="ViewUser">
    <Authorized>
        <div class="alert alert-warning alert-dismissible text-center position-fixed w-100" role="alert" style="z-index:9999;">
          These changes won't affect the actual pieces available, please refresh the browser to see the actual values
      </div>
        <MudPaper Style="height:100vh; width:100%;" Outlined="true" Class="border-hidden pa-4" Elevation="0">
            <div class="row" style="width:100%;height:100vh;">
                <div class="col d-flex justify-content-center align-items-center flex-wrap gap-3">
                    @foreach (var product in _products!)
                    {
                        if (product.PiecesAvaliable != 0)
                        {
                            <ECommerce.Client.Components.ProductCard OnAddToCart="() => ViewUserAddToCart(product)" Product="product"></ECommerce.Client.Components.ProductCard>
                        }
                    }
                </div>
            </div>

        </MudPaper>
    </Authorized>
</AuthorizeView>


<div class="d-flex flex-column gap-1" style="position:fixed; bottom:0; right:0; padding:5px; margin:10px; z-index:100;">

    <AuthorizeView Roles="True,ViewUser">
        <MudTooltip Arrow="true" Text="@_toolTipText">
            <MudIconButton OnClick="ToggleViewAsClient" Icon="@Icons.Material.Filled.RemoveRedEye" Style="border-radius:50%;padding:10px;" Variant="Variant.Filled" Color="@_bgButtonColor" Size="Size.Large" />
        </MudTooltip>
    </AuthorizeView>

    <MudIconButton OnClick="ShowSearchField" Icon="@Icons.Material.Filled.Search" Style="border-radius:50%;padding:10px;" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Large" />

</div>


@code {
    private static ICollection<ProductDto>? _products = new LinkedList<ProductDto>();

    private int uniqueId = 1;
    private string fileInput = string.Empty;
    private bool isSearchFieldHidden = true;
    private bool _isloading = false;


    private string _toolTipText = "View as a client";
    private Color _bgButtonColor = Color.Primary;

    [Inject]
    public HttpClient Http { get; set; } 

    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState { get; set; }

    [Inject]
    public AuthenticationStateProvider? StateProvider { get; set; }

    // Operations Related to the admin + View User
    private async Task GetProducts()
    {
        var response = await Http.GetFromJsonAsync<List<ProductDto>>("api/products/getallproducts");

        if(response != null || response?.Count > 0)
        {
            _products = response;
        }
    }
    private async Task RemoveProduct(ProductDto product)
    {


        var response = await Http.DeleteFromJsonAsync<bool>($"api/products/deleteproduct/{product.Id}");

        if(response == true )
        {
            Snackbar.Add("Item was deleted Successfully", Severity.Error);
            _products!.Remove(product);
        }
        else
        {
            Snackbar.Add("Failed to delete item", Severity.Info);
        }
    }
    private async Task UpdateProduct(ProductDto product)
    {
        var response = await Http.PostAsJsonAsync("api/products/updateproduct", product);

        if(response.IsSuccessStatusCode)
        {
            Snackbar.Add("Item was updated Successfully", Severity.Success);
        }

        else
        {
            Snackbar.Add("Failed to update item", Severity.Error);
        }
    }
    private async Task ToggleViewAsClient()
    {
        var state = await authenticationState!;

        if(state != null)
        {
            var user = state.User;
            var currentRole = user.FindFirst(ClaimTypes.Role);

            //claims identity => claims related to this identity(user can have multiple identities)
            var claimsIdentity = (ClaimsIdentity) user?.Identity!;
            var customAuthProvider = (CustomAuthenticationStateProvider?) StateProvider;

            //you have a  userView role and you clicked
            if(currentRole!.Value.Contains("ViewUser"))
            {
                _toolTipText = "View as a client";
                _bgButtonColor = Color.Primary;

                claimsIdentity.RemoveClaim(currentRole);
                claimsIdentity.AddClaim(new Claim (ClaimTypes.Role , "True"));
                customAuthProvider?.UpdateAuthenticationState(claimsIdentity);
            }

            //you have admin role and you clicked
            else
            {
                _toolTipText = "View as an admin";
                _bgButtonColor = Color.Default;

                claimsIdentity.RemoveClaim(currentRole);
                claimsIdentity.AddClaim(new Claim(ClaimTypes.Role, "ViewUser"));
                customAuthProvider?.UpdateAuthenticationState(claimsIdentity);
            }
        }
    }
    public void ViewUserAddToCart(ProductDto product)
    {
        product.PiecesAvaliable--;
    }

    // Operations related to admin + View User + Client
    private async Task SearchProducts(string searchText)
    {
        if(!string.IsNullOrEmpty(searchText) || !string.IsNullOrWhiteSpace(searchText))
        {
            var response = await Http.GetFromJsonAsync<List<ProductDto>>($"api/products/searchproduct/{searchText}");

            if (response != null)
            {
                _products = response;
            }
        }
        else
        {
            await GetProducts();
        }

    }

    // Operations related to Client
    private async Task AddToCart(ProductDto product)
    {
        var response = await Http.PostAsJsonAsync($"api/clients/addtoCart", product);

        if(response.IsSuccessStatusCode)
        {
            product.PiecesAvaliable--;
        }

    }
    private async Task GetAvailableProducts()
    {
        var availableProducts = await Http.GetFromJsonAsync<List<ProductDto>>($"api/products/getavailableproducts");

        if(availableProducts != null)
        {
            _products = availableProducts;
        }
    }


    private void ShowSearchField()
    {
        isSearchFieldHidden = !isSearchFieldHidden;
    } 



    protected override async Task OnInitializedAsync()
    {
        _isloading = true;

        var state = await authenticationState!;

        if(state != null)
        {
            var role = state.User.FindFirst(ClaimTypes.Role);

            //client
            if(role!.Value.Contains("False"))
            {
                await GetAvailableProducts();
            }

            //admin + ViewUser
            else
            {
                await GetProducts();
            }
        }

        _isloading = false;
    }

    


}

@page "/settings"
@using ECommerce.Shared.Models;
@using System.Security.Claims;
@layout SecondaryLayout

<style>
    body{
        background-color:#f7f7f7;
    }

    .email-form {
        box-shadow: 0 0 30px rgba(214, 215, 216, 0.6);
        padding: 30px;
        background: #fff
    }

</style>

<AuthorizeView Context="authContext">
<section id="#user-details" style="padding:30px 0  0 15px;">
<div class="container-fluid " >
    <div class="row ">
        <div class="col-lg-4 col-md-6 col-sm-12 p-2" >
                    <EditForm Model="passwordResource" class="email-form rounded-3">
                <DataAnnotationsValidator />
                <div class="row text-center d-flex align-items-center justify-content-center">
                        <img src="images/userInfo.png" style="width:125px;height:100px;" />
                </div>

                <div class="row">
                    <div class="form-group">
                         <input disabled class="form-control mt-2 shadow-none" placeholder="@authContext.User?.FindFirst(ClaimTypes.Name)?.Value">

                                <InputText class="form-control mt-2 shadow-none" @bind-Value="passwordResource.Password" placeholder="password" rows="4"></InputText>
                                <ValidationMessage For="() => passwordResource.Password"></ValidationMessage>
                    </div>
                </div>
                <div class="d-flex justify-content-end mt-2">
                    <button type="submit" class="btn btn-primary shadow-none">
                            <span>update</span>
                    </button>
                </div>
            </EditForm>
        </div>
        <div class="col-8"></div>
    </div>
</div>
</section>
</AuthorizeView>

@code {

    [Inject]
    public HttpClient Http { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState { get; set; }

    private PasswordResource passwordResource = new PasswordResource();

    //no need to Ecnrypt the password before sending the new password because we're using Https
    private async Task UpdatePasswordAsync()
    {
        var response = await Http.PostAsJsonAsync($"api/client/updatepassword", passwordResource);

        if(response.IsSuccessStatusCode)
        {

        }
    }

}
